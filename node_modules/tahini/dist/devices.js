'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectDeviceFactory = exports.connectToLexicalScope = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _reflection = require('./reflection');

var _reactRedux = require('react-redux');

var _immutable = require('immutable');

var _util = require('./util');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var connectToLexicalScope = exports.connectToLexicalScope = function connectToLexicalScope(_ref, actions) {
  var dataPath = _ref.dataPath,
      namespace = _ref.namespace;
  return (0, _reactRedux.connect)(function (state) {
    return { subState: state.getIn(dataPath) };
  }, // map rootState -> subState
  (0, _util.applyPartialAction)({ dataPath: dataPath, namespace: namespace })(actions));
};

var connectDeviceFactory = exports.connectDeviceFactory = function connectDeviceFactory(_ref2) {
  var appStore = _ref2.appStore,
      reflection = _ref2.reflection,
      actionCreatorHash = _ref2.actionCreatorHash,
      reducerHash = _ref2.reducerHash;


  var initStateOnDataPath = function initStateOnDataPath(dataPath, subState) {
    return appStore.dispatch({ type: 'setSubState', path: dataPath, payload: (0, _immutable.fromJS)(subState) });
  };

  var updateStateOnDataPath = function updateStateOnDataPath(dataPath, updater) {
    return initStateOnDataPath(dataPath, updater(appStore.getState().getIn(dataPath)));
  };

  var _getDevice = function _getDevice(deviceClass) {
    var dataPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var initStateOrUpdater = arguments[2];

    if (!deviceClass.actions) deviceClass.actions = {};
    if (!deviceClass.namespace) deviceClass.namespace = deviceClass.name;
    if (!deviceClass.reducer) deviceClass.reducer = {};

    actionCreatorHash[deviceClass.namespace] = deviceClass.actions;

    reflection.mountDevice({
      dataPath: dataPath,
      namespace: deviceClass.namespace,
      actions: deviceClass.actions
    });

    if ((typeof initStateOrUpdater === 'undefined' ? 'undefined' : _typeof(initStateOrUpdater)) === 'object') initStateOnDataPath(dataPath, initStateOrUpdater);else if (typeof initStateOrUpdater === 'function') updateStateOnDataPath(dataPath, initStateOrUpdater);

    // import the reducer
    if (!(deviceClass.namespace in reducerHash)) reducerHash[deviceClass.namespace] = deviceClass.reducer;

    var device = connectToLexicalScope({
      dataPath: dataPath, namespace: deviceClass.namespace
    }, deviceClass.actions)(deviceClass);

    device.defaultProps = _extends({
      store: appStore,

      // hierarchical deviceClass instancing
      getDevice: function getDevice(deviceClass, localPath, deviceInitState) {
        return _getDevice(deviceClass, dataPath.concat(localPath), deviceInitState);
      }

    }, (0, _reflection.deviceReflectors)(reflection, dataPath, deviceClass, function (_ref3) {
      var _actionCreatorHash$ta;

      var targetPath = _ref3.dataPath,
          targetNamespace = _ref3.namespace,
          actionType = _ref3.type,
          actionParams = _ref3.params;

      var finalAction = _extends({}, (_actionCreatorHash$ta = actionCreatorHash[targetNamespace])[actionType].apply(_actionCreatorHash$ta, _toConsumableArray(actionParams)), {
        dataPath: targetPath,
        namespace: targetNamespace,
        origin: { dataPath: dataPath, namespace: deviceClass.namespace }
      });

      // this could be refactored into a printOn?

      return appStore.dispatch(finalAction);
    }));

    return device;
  };

  return { getDevice: _getDevice, initStateOnDataPath: initStateOnDataPath, updateStateOnDataPath: updateStateOnDataPath };
};

// implement global cache context, deviceClass reducer cleanup