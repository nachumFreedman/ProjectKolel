'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bootStores = exports.baseReducerHash = undefined;

var _redux = require('redux');

var _immutable = require('immutable');

var _reflection = require('./reflection');

var _util = require('./util');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var baseReducerHash = exports.baseReducerHash = function baseReducerHash() {
  return {
    global: {
      '@@redux/INIT': function reduxINIT() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.fromJS)({});
        var action = arguments[1];
        return state;
      },
      setSubState: function setSubState(state, action) {
        return state.setIn(action.path, action.payload);
      }
    }
  };
};

// takes middleware
// returns reducerHash, appStore
var bootStores = exports.bootStores = function bootStores() {
  var middleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var reducerHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : baseReducerHash();

  var actionCreatorHash = {};

  var appStore = (0, _redux.createStore)((0, _util.isolateMutationByDataPath)((0, _util.consumeActionByNamespace)(reducerHash)), _redux.applyMiddleware.apply(undefined, _toConsumableArray(middleware)));

  // boot the reflection
  var reflection = (0, _reflection.createReflection)();

  return {
    appStore: appStore, reflection: reflection, actionCreatorHash: actionCreatorHash, reducerHash: reducerHash
  };
};