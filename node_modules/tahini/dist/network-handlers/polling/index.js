'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _http = require('../http/');

var _http2 = _interopRequireDefault(_http);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Poller = function () {
  function Poller(next, done, err) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$Fetcher = _ref.Fetcher,
        Fetcher = _ref$Fetcher === undefined ? _http2.default : _ref$Fetcher;

    _classCallCheck(this, Poller);

    this.next = next;
    this.done = done;
    this.err = err;

    this.Fetcher = Fetcher;
  }

  _createClass(Poller, [{
    key: 'handleRequest',
    value: function handleRequest(action) {
      var _this = this;

      this.action = action;
      // start polling if first request

      var poll = function poll() {
        var fetcher = new _this.Fetcher(_this.next, function () {
          return 'fetch done';
        }, _this.err);
        fetcher.handleRequest(_this.action);
      };

      // do the interval if none existed
      this.pollingInterval = this.pollingInterval || setInterval(poll.bind(this), this.action.network.interval);
      poll();

      // return an unsub function which clears the interval and dones
      return function () {
        clearInterval(_this.pollingInterval);
        _this.done();
      };
    }
  }]);

  return Poller;
}();

exports.default = Poller;