'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// implied import global.fetch
// implied import global.Headers

var Fetcher = function () {
  function Fetcher(next, done, err) {
    _classCallCheck(this, Fetcher);

    this.next = next;
    this.done = done;
    this.err = err;

    this.requests = [];
  }

  _createClass(Fetcher, [{
    key: 'handleRequest',
    value: function handleRequest(action) {
      var _this = this;

      this.rereqStrategy = action.network.rereqStrategy || 'takeFirst';

      if (this.rereqStrategy === 'takeFirst' && this.requests.length) return this.requests[this.requests.length - 1];

      var method = action.network.method || 'GET';
      var headers = new Headers();

      if (method !== 'GET' && method !== 'DELETE') {
        action.network.headers = action.network.headers || {};
        action.network.headers['Accept'] = 'application/json';
        action.network.headers['Content-Type'] = 'application/json';
      }

      // put in also headers
      if (action.network.headers) for (var i in action.network.headers) {
        headers.append(i, action.network.headers[i]);
      }var req = { method: method, headers: headers };

      if (method !== 'GET' && method !== 'DELETE' && action.network.payload) {
        req.body = JSON.stringify(action.network.body || action.network.payload);
      }

      this.requests.push(function (i) {
        return fetch(action.network.url, req).then(function (response) {
          _this.requests.splice(i, 1);

          if (_this.rereqStrategy === 'takeLast') {
            if (_this.requests.length !== i) {
              return !'done';
            }
          }

          response.status !== 200 ? response.json().then(function (json) {
            return _this.err({ status: response.status, body: json });
          }) : response.json().then(function (json) {
            return _this.next(json);
          }).catch(function (e) {
            return _this.err({ err: e });
          });

          return 'done';
        }).then(function (isDone) {
          return isDone ? _this.done() : 'aborted';
        });
      } // do we want an abortAction?
      (this.requests.length));

      return this.requests[this.requests.length - 1];
    }
  }]);

  return Fetcher;
}();

exports.default = Fetcher;