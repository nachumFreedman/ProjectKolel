'use strict';

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_sinonChai2.default);

describe('http fetch handler', function () {
  it('requests something and calls next withe response', function (doneTest) {
    var next = _sinon2.default.spy();
    var done = _sinon2.default.spy();
    var err = _sinon2.default.spy();

    var testValue = 'whatever';
    var testUrl = 'some.thing';
    global.fetch = _sinon2.default.stub().returns(Promise.resolve({
      status: 200,
      json: function json() {
        return Promise.resolve(testValue);
      }
    }));
    var fetcher = new _2.default(next, done, err);

    // spy on listWala.fetcher.handleRequest

    var action = {
      network: {
        handler: 'Fetcher',
        url: testUrl,
        headers: { a: 'b' }
      },
      nextAction: {}
    };

    fetcher.handleRequest(action).then(function () {
      (0, _chai.expect)(fetch).to.have.been.calledWith(testUrl);
      (0, _chai.expect)(fetch).to.have.been.calledOnce;
      (0, _chai.expect)(fetch.firstCall.args[1].method).to.eql('GET');
      (0, _chai.expect)(fetch.firstCall.args[1].headers instanceof Headers).to.be.ok;
      (0, _chai.expect)(fetch.firstCall.args[1].headers.a).to.eql('b');

      (0, _chai.expect)(next).to.have.been.calledWith(testValue);
      (0, _chai.expect)(next).to.have.been.calledOnce;

      (0, _chai.expect)(done).to.have.been.calledOnce;
      doneTest();
    });
  });

  it('requests by POST something and calls next withe response', function (doneTest) {
    var next = _sinon2.default.spy();
    var done = _sinon2.default.spy();
    var err = _sinon2.default.spy();

    var testValue = 'whatever';
    var testUrl = 'some.thing';
    var testPayload = { what: 'ever' };
    global.fetch = _sinon2.default.stub().returns(Promise.resolve({
      status: 200,
      json: function json() {
        return Promise.resolve(testValue);
      }
    }));
    var fetcher = new _2.default(next, done, err);

    var action = {
      network: {
        handler: 'Fetcher',
        url: testUrl,
        payload: testPayload,
        method: 'POST'
      },
      nextAction: {}
    };

    fetcher.handleRequest(action).then(function () {
      (0, _chai.expect)(fetch).to.have.been.calledWith(testUrl);
      (0, _chai.expect)(fetch).to.have.been.calledOnce;
      (0, _chai.expect)(fetch.firstCall.args[1].method).to.eql('POST');
      (0, _chai.expect)(fetch.firstCall.args[1].body).to.eql(JSON.stringify(testPayload));
      (0, _chai.expect)(fetch.firstCall.args[1].headers instanceof Headers).to.be.ok;
      (0, _chai.expect)(fetch.firstCall.args[1].headers.Accept).to.eql('application/json');
      (0, _chai.expect)(fetch.firstCall.args[1].headers['Content-Type']).to.eql('application/json');

      (0, _chai.expect)(next).to.have.been.calledWith(testValue);
      (0, _chai.expect)(next).to.have.been.calledOnce;

      (0, _chai.expect)(done).to.have.been.calledOnce;
      doneTest();
    });
  });

  it('uses takeLast rereq strategy', function (doneTest) {
    var next = _sinon2.default.spy();
    var done = _sinon2.default.spy();
    var err = _sinon2.default.spy();

    var testValue = 'whatever';
    var testUrl = 'some.thing';
    global.fetch = function (url, req) {
      return new Promise(function (resolve, rej) {
        setTimeout(function () {
          resolve({
            status: 200,
            json: function json() {
              return Promise.resolve(req.body);
            }
          });
        }, 10);
      });
    };

    var fetchSpy = _sinon2.default.spy(global, 'fetch');

    var fetcher = new _2.default(next, done, err);

    var action = function action(i) {
      return {
        network: {
          method: 'POST',
          handler: 'Fetcher',
          url: testUrl + '' + i,
          payload: i,
          rereqStrategy: 'takeLast'
        },
        nextAction: {}
      };
    };

    fetcher.handleRequest(action(0));
    fetcher.handleRequest(action(1)).then(function () {
      (0, _chai.expect)(fetch).to.have.been.calledWith(testUrl + '0');
      (0, _chai.expect)(fetch).to.have.been.calledWith(testUrl + '1');
      //expect(fetch).to.have.been.calledTwice; // this fails due to global fetch traffic
      (0, _chai.expect)(fetch.firstCall.args[1].method).to.eql('POST');

      // global fetch spy stub echos request body (payload...)
      (0, _chai.expect)(next).to.not.have.been.calledWith('0');
      (0, _chai.expect)(next).to.have.been.calledWith('1');
      (0, _chai.expect)(next).to.have.been.calledOnce;

      (0, _chai.expect)(done).to.have.been.calledOnce;
      doneTest();
    }).catch(doneTest);
  });
});