'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _reactAddonsPureRenderMixin = require('react-addons-pure-render-mixin');

var _reactAddonsPureRenderMixin2 = _interopRequireDefault(_reactAddonsPureRenderMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultProps = { exposures: {}, getDevice: function getDevice() {
    return Base;
  } };

var Base = function (_Component) {
  _inherits(Base, _Component);

  function Base(props) {
    _classCallCheck(this, Base);

    var _this = _possibleConstructorReturn(this, (Base.__proto__ || Object.getPrototypeOf(Base)).call(this, props));

    _this.pureComponentUpdate = _reactAddonsPureRenderMixin2.default.shouldComponentUpdate.bind(_this);
    return _this;
  }

  _createClass(Base, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return this.pureComponentUpdate.apply(this, arguments);
    }
  }, {
    key: 'render',
    value: function render() {
      // toss no-render-warning
      var _props = this.props,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

      // should test this prop passing, it is relied on in tests

      return (0, _react.createElement)('div', {}, children);
      // ie just render the children
    }
  }], [{
    key: 'defaultProps',
    get: function get() {
      return defaultProps; // use this to pass actionCreators from children to parents
    },
    set: function set(ndp) {
      defaultProps = ndp;
    }
  }, {
    key: 'actions',
    get: function get() {
      // toss no-actions-warning
      return {};
      // {[actionType]: (payload)=>({type:actionType, payload}),..}
    }
  }, {
    key: 'reducer',
    get: function get() {
      // toss no-reducer-warning
      return {};
      // {[actionType]: (subState, action)=> { /*...*/; return nuSubState; },..}
    }
  }, {
    key: 'namespace',
    get: function get() {
      // toss no-namespace-warning
      return 'tahini.base';
      // reverse domain
    }
  }, {
    key: 'initState',
    get: function get() {
      // toss no-init-state-warning
      return {};
      // can return plainJS or immutable, but immutable is better for subclass-merging
      // baseReducer.setSubstate-> immutable.setIn( dataPath, ...initState... )
    }
  }]);

  return Base;
}(_react.Component);

exports.default = Base;